"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
var scalts_1 = require("scalts");
var SerializersMapper_1 = require("./SerializersMapper");

var Serializable = function () {
    function Serializable() {
        _classCallCheck(this, Serializable);
    }

    _createClass(Serializable, [{
        key: "toJson",
        value: function toJson() {
            var _this = this;

            var obj = {};
            SerializersMapper_1.default.getFieldSerializers(this.constructor.prototype).forEach(function (prop) {
                obj[prop.jsonPropertyName] = prop.marshaller(_this[prop.classPropertyName], obj, _this);
            });
            return obj;
        }
    }, {
        key: "toString",
        value: function toString() {
            var tabLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;

            return JSON.stringify(this, null, tabLength);
        }
    }], [{
        key: "fromString",
        value: function fromString(str) {
            try {
                var json = JSON.parse(str);
                return this.fromJsObject(json);
            } catch (e) {
                return scalts_1.Left(e);
            }
        }
    }, {
        key: "fromStringAsArray",
        value: function fromStringAsArray(str) {
            try {
                var json = JSON.parse(str);
                return this.fromJsArray(json);
            } catch (e) {
                return scalts_1.Left(e);
            }
        }
    }, {
        key: "fromJsObject",
        value: function fromJsObject(jsObject) {
            var jsonPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var classPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            var entity = new this.prototype.constructor();
            var serializeErrors = [];
            SerializersMapper_1.default.getFieldSerializers(this.prototype).forEach(function (prop) {
                var unmarshallResult = prop.unmarshaller(jsObject[prop.jsonPropertyName], jsObject, entity, jsonPath, classPath);
                if (unmarshallResult.isLeft) {
                    serializeErrors.push.apply(serializeErrors, _toConsumableArray(unmarshallResult.left().get()));
                } else if (serializeErrors.isEmpty) {
                    entity[prop.classPropertyName] = unmarshallResult.right().get();
                }
            });
            return serializeErrors.isEmpty ? scalts_1.Right(entity) : scalts_1.Left(serializeErrors);
        }
    }, {
        key: "fromJsArray",
        value: function fromJsArray(jsArray) {
            var _this2 = this;

            var jsonPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var classPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            var entities = [];
            var serializeErrors = [];
            jsArray.forEach(function (jsObject, index) {
                var newJsonPath = [].concat(_toConsumableArray(jsonPath), ["[" + index + "]"]);
                var newClassPath = [].concat(_toConsumableArray(classPath), ["[" + index + "]"]);
                var unmarshallResult = _this2.fromJsObject(jsObject, newJsonPath, newClassPath);
                if (unmarshallResult.isLeft) {
                    serializeErrors.push.apply(serializeErrors, _toConsumableArray(unmarshallResult.left().get()));
                } else if (serializeErrors.isEmpty) {
                    entities.push(unmarshallResult.right().get());
                }
            });
            return serializeErrors.isEmpty ? scalts_1.Right(entities) : scalts_1.Left(serializeErrors);
        }
    }]);

    return Serializable;
}();

exports.default = Serializable;