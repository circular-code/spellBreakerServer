"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var scalts_1 = require("scalts");
var transformers_1 = require("../transformers");
var Serializable_1 = require("../core/Serializable");
var SerializersMapper_1 = require("../core/SerializersMapper");
function Serialize(mbJsonPropertyName) {
    var _unmarshaller = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : transformers_1.defaultUnmarshaller;

    var _marshaller = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : transformers_1.defaultMarshaller;

    var mbGivenType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : scalts_1.None;

    return function (target, classPropertyName) {
        if (!Serializable_1.default.prototype.isPrototypeOf(target)) {
            console.error("Serialize decorator can only be used on a Serializable class.");
            return;
        }
        var reflectedType = null;
        var jsonPropertyName = mbJsonPropertyName || classPropertyName;
        if (mbGivenType.isEmpty) {
            // type should be given to SerializeOpt / SerializeArray for Option / Array
            reflectedType = Reflect.getMetadata('design:type', target, classPropertyName);
            if (reflectedType === Array) {
                console.warn("Please use SerializeArray instead of Serialize for Array serialization.");
                return;
            }
            if (reflectedType === scalts_1.Optional) {
                console.warn("Please use SerializeOpt instead of Serialize for Optional serialization.");
                return;
            }
        }
        var mbReflectedType = reflectedType ? scalts_1.Some(reflectedType) : scalts_1.None;
        var mbType = mbGivenType.isEmpty ? mbReflectedType : mbGivenType;
        SerializersMapper_1.default.registerField(target, {
            unmarshaller: function unmarshaller(value, json, clazz, jsonPath, classPath) {
                return _unmarshaller(value, json, clazz, jsonPropertyName, classPropertyName, target, mbType, jsonPath, classPath);
            },
            marshaller: function marshaller(value, json, clazz) {
                return _marshaller(value, json, clazz, jsonPropertyName, classPropertyName, target, mbType);
            },
            classPropertyName: classPropertyName,
            jsonPropertyName: jsonPropertyName
        });
    };
}
exports.default = Serialize;