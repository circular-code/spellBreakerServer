"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var scalts_1 = require("scalts");

var UnmarshallError = function () {
    function UnmarshallError(value, type, jsonPropertyName, classPropertyName, target, jsonPath, classPath) {
        var additionalMessage = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : scalts_1.None;

        _classCallCheck(this, UnmarshallError);

        this.value = value;
        this.type = type;
        this.jsonPropertyName = jsonPropertyName;
        this.classPropertyName = classPropertyName;
        this.target = target;
        this.jsonPath = jsonPath;
        this.classPath = classPath;
        this.additionalMessage = additionalMessage;
        this.name = 'UnmarshallError';
    }

    _createClass(UnmarshallError, [{
        key: "toString",
        value: function toString() {
            return this.message;
        }
    }, {
        key: "message",
        get: function get() {
            var strClassPath = this.classPath.join('.') + "." + this.target.constructor['name'] + "." + this.classPropertyName;
            var baseMessage = "An error occurred while serializing value " + this.value + " into property " + strClassPath + " of type " + this.type.fold(function () {
                return 'unknown';
            }, function (t) {
                return t['name'];
            }) + ".";
            return "" + baseMessage + this.additionalMessage.map(function (m) {
                return "\n\t" + m;
            }).getOrElse(function () {
                return '';
            });
        }
    }]);

    return UnmarshallError;
}();

exports.default = UnmarshallError;