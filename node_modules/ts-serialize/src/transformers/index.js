"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", { value: true });
var scalts_1 = require("scalts");
var UnmarshallError_1 = require("../errors/UnmarshallError");
var Serializable_1 = require("../core/Serializable");
var utils_1 = require("../utils");
exports.defaultMarshaller = function (value, json, clazz, classPropertyName, jsonPropertyName, target, mbType) {
    var undefinedValue = null;
    return mbType.fold(value, function (type) {
        if (type === scalts_1.Optional) {
            return value.getOrElse(undefinedValue);
        }
        if (Serializable_1.default.prototype.isPrototypeOf(type.prototype)) {
            return value.toJson();
        }
        return value;
    });
};
exports.defaultUnmarshaller = function (value, json, clazz, classPropertyName, jsonPropertyName, target, mbType, jsonPath, classPath) {
    // if the value is not define
    if (!utils_1.isDefined(value)) {
        // if there is a default value
        if (utils_1.isDefined(clazz[classPropertyName])) {
            return scalts_1.Right(clazz[classPropertyName]);
        } else {
            var additionalErrorMessage = scalts_1.Some("The value is not defined.");
            return scalts_1.Left([new UnmarshallError_1.default(value, mbType, jsonPropertyName, classPropertyName, target, jsonPath, classPath, additionalErrorMessage)]);
        }
    }
    return mbType.fold(function () {
        return scalts_1.Right(value);
    }, function (type) {
        if (type === String) {
            return stringUnmarshaller(value, json, clazz, classPropertyName, jsonPropertyName, target, mbType, jsonPath, classPath);
        }
        if (type === Number) {
            return numberUnmarshaller(value, json, clazz, classPropertyName, jsonPropertyName, target, mbType, jsonPath, classPath);
        }
        if (Serializable_1.default.prototype.isPrototypeOf(type.prototype)) {
            return type.prototype.constructor.fromJsObject(value, jsonPath, classPath);
        }
        if (type === Object) {
            return objectUnmarshaller(value, json, clazz, classPropertyName, jsonPropertyName, target, mbType, jsonPath, classPath);
        }
        var additionalMessage = "No unmarshaller found for type " + type['name'];
        return scalts_1.Left([new UnmarshallError_1.default(value, scalts_1.Some(type), jsonPropertyName, classPropertyName, target, jsonPath, classPath, scalts_1.Some(additionalMessage))]);
    });
};
var stringUnmarshaller = function stringUnmarshaller(value, json, clazz, classPropertyName, jsonPropertyName, target, mbType, jsonPath, classPath) {
    if (typeof value === 'string') {
        return scalts_1.Right(value);
    }
    var additionalErrorMessage = scalts_1.Some("The value is not a string value.");
    return scalts_1.Left([new UnmarshallError_1.default(value, scalts_1.Some(String), jsonPropertyName, classPropertyName, target, jsonPath, classPath, additionalErrorMessage)]);
};
var numberUnmarshaller = function numberUnmarshaller(value, json, clazz, classPropertyName, jsonPropertyName, target, mbType, jsonPath, classPath) {
    if (typeof value === 'number') {
        return scalts_1.Right(value);
    }
    if (typeof value === 'string' && !isNaN(+value)) {
        return scalts_1.Right(+value);
    }
    var additionalErrorMessage = scalts_1.Some("The value is not a number value.");
    return scalts_1.Left([new UnmarshallError_1.default(value, scalts_1.Some(Number), jsonPropertyName, classPropertyName, target, jsonPath, classPath, additionalErrorMessage)]);
};
var objectUnmarshaller = function objectUnmarshaller(value, json, clazz, classPropertyName, jsonPropertyName, target, mbType, jsonPath, classPath) {
    if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
        return scalts_1.Right(value);
    }
    var additionalErrorMessage = scalts_1.Some("The value is not an object.");
    return scalts_1.Left([new UnmarshallError_1.default(value, scalts_1.Some(Object), jsonPropertyName, classPropertyName, target, jsonPath, classPath, additionalErrorMessage)]);
};