"use strict";

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

Object.defineProperty(exports, "__esModule", { value: true });
var lodash = require("lodash");
var scalts_1 = require("scalts");
Array.prototype.chunk = function () {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    return lodash.chunk(this, size);
};
Array.prototype.compact = function () {
    return lodash.compact(this);
};
Array.prototype.copy = function () {
    return [].concat(_toConsumableArray(this));
};
Array.prototype.difference = function () {
    for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
        values[_key] = arguments[_key];
    }

    return lodash.difference.apply(lodash, [this].concat(values));
};
Array.prototype.differenceBy = function (values, iteratee) {
    return lodash.differenceBy.apply(lodash, [this].concat(_toConsumableArray(values), [iteratee]));
};
Array.prototype.differenceWith = function (values, comparator) {
    return lodash.differenceWith.apply(lodash, [this].concat(_toConsumableArray(values), [comparator]));
};
Object.defineProperty(Array.prototype, 'distinct', {
    get: function get() {
        return lodash.uniq(this);
    },
    enumerable: true,
    configurable: true
});
Array.prototype.drop = function (n) {
    return lodash.drop(this, n);
};
Array.prototype.dropRight = function (n) {
    return lodash.dropRight(this, n);
};
Array.prototype.dropRightWhile = function (predicate) {
    return lodash.dropRightWhile(this, predicate);
};
Array.prototype.dropWhile = function (predicate) {
    return lodash.dropWhile(this, predicate);
};
Array.prototype.exists = function (predicate) {
    return this.findOpt(predicate).nonEmpty;
};
Array.prototype.findOpt = function (predicate) {
    return scalts_1.Optional.apply(this.find(predicate));
};
Array.prototype.findIndexOpt = function (predicate) {
    var res = this.findIndex(predicate);
    return res === -1 ? scalts_1.None : scalts_1.Some(res);
};
Array.prototype.findLastIndexOpt = function (predicate) {
    var res = lodash.findLastIndex(this, predicate);
    return res === -1 ? scalts_1.None : scalts_1.Some(res);
};
Array.prototype.flatMap = function (predicate) {
    return this.map(predicate).flatten();
};
Array.prototype.flatten = function () {
    return lodash.flatten(this);
};
Object.defineProperty(Array.prototype, 'head', {
    get: function get() {
        return this.isEmpty ? scalts_1.None : scalts_1.Some(this[0]);
    },
    enumerable: true,
    configurable: true
});
Array.prototype.indexOfOpt = function (value) {
    var fromIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    var res = this.indexOf(value);
    return res < 0 ? scalts_1.None : scalts_1.Some(res);
};
Object.defineProperty(Array.prototype, 'initial', {
    get: function get() {
        var _this = this;

        return this.filter(function (value, index) {
            return index + 1 !== _this.length;
        });
    },
    enumerable: true,
    configurable: true
});
Array.prototype.intersection = function () {
    for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        values[_key2] = arguments[_key2];
    }

    return lodash.intersection.apply(lodash, [this].concat(values));
};
Array.prototype.intersectionBy = function (values, iteratee) {
    return lodash.intersectionBy.apply(lodash, [this].concat(_toConsumableArray(values), [iteratee]));
};
Array.prototype.intersectionWith = function (values, comparator) {
    return lodash.intersectionWith.apply(lodash, [this].concat(_toConsumableArray(values), [comparator]));
};
Object.defineProperty(Array.prototype, 'isEmpty', {
    get: function get() {
        return this.length === 0;
    },
    enumerable: true,
    configurable: true
});
Object.defineProperty(Array.prototype, 'last', {
    get: function get() {
        return this.isEmpty ? scalts_1.None : scalts_1.Some(this[this.length - 1]);
    },
    enumerable: true,
    configurable: true
});
Array.prototype.lastIndexOfOpt = function (value, fromIndex) {
    var res = this.lastIndexOf(value, fromIndex || this.length - 1);
    return res === -1 ? scalts_1.None : scalts_1.Some(res);
};
Object.defineProperty(Array.prototype, 'reversed', {
    get: function get() {
        return this.copy().reverse();
    },
    enumerable: true,
    configurable: true
});
Array.prototype.sortBy = function (iteratee) {
    return lodash.sortBy(this, iteratee);
};
Object.defineProperty(Array.prototype, 'tail', {
    get: function get() {
        var _ref = _toArray(this),
            first = _ref[0],
            arr = _ref.slice(1);

        return arr;
    },
    enumerable: true,
    configurable: true
});
Array.prototype.take = function () {
    var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    return this.filter(function (value, index) {
        return index < n;
    });
};
Array.prototype.takeRight = function () {
    var _this2 = this;

    var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    return this.filter(function (value, index) {
        return _this2.length - 1 - index < n;
    });
};
Array.prototype.takeRightWhile = function (predicate) {
    var acc = [];
    for (var i = this.length - 1; i >= 0; i--) {
        if (predicate(this[i])) {
            acc.unshift(this[i]);
        } else {
            break;
        }
    }
    return acc;
};
Array.prototype.takeWhile = function (predicate) {
    var acc = [];
    for (var i = 0; i < this.length; i++) {
        if (predicate(this[i])) {
            acc.push(this[i]);
        } else {
            break;
        }
    }
    return acc;
};
exports.default = Array;