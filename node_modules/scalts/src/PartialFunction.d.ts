import { Optional } from './Optional';
import { Case } from './MatchCase';
/**
 *
 */
export interface PartialFunction<A, B> {
    /**
     * Execute function.
     */
    (arg: A): B;
    /**
     * Checks if a value is contained in the function's domain.
     *
     * @param  x   the value to test
     * @return `'''true'''`, iff `x` is in the domain of this function, `'''false'''` otherwise.
     */
    isDefinedAt(arg: A): boolean;
    /**
     * Composes this partial function with a fallback partial function which
     * gets applied where this partial function is not defined.
     */
    orElse(p: PartialFunction<A, B>): PartialFunction<A, B>;
    /**
     * Composes this partial function with a transformation function that
     * gets applied to results of this partial function.
     */
    andThen<C>(p: PartialFunction<B, C>): PartialFunction<A, C>;
    /**
     * Turns this partial function into a plain function returning an `Optional` result.
     */
    lift(): (arg: A) => Optional<B>;
    /**
     * Applies this partial function to the given argument when it is contained in the function domain.
     * Applies fallback function where this partial function is not defined.
     */
    applyOrElse(arg: A, orElse: (arg: A) => B): B;
}
export declare function PartialFunction<A, B>(...cases: Case<A, B>[]): PartialFunction<A, B>;
