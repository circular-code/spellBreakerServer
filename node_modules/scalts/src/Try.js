"use strict";
/* tslint:disable:no-use-before-declare */
Object.defineProperty(exports, "__esModule", { value: true });
const Optional_1 = require("./Optional");
const Either_1 = require("./Either");
function Try(f) {
    try {
        return Success(f());
    }
    catch (e) {
        return Failure(e);
    }
}
exports.Try = Try;
function Success(a) {
    return new SuccessImpl(a);
}
exports.Success = Success;
function Failure(e) {
    return new FailureImpl(e);
}
exports.Failure = Failure;
//------------------------------------
//
// Implementation section.
//
//------------------------------------
class TryImpl {
    toString() {
        return this.isSuccess ? `Success(${this.get()}})` : `Failure(${this.getError()}})`;
    }
    get() {
        throw 'impl child';
    }
    getError() {
        throw 'impl child';
    }
    flatMap(f) {
        throw 'impl child';
    }
    map(f) {
        throw 'impl child';
    }
    filter(f) {
        throw 'impl child';
    }
    toOptional() {
        return this.isSuccess ? Optional_1.Some(this.get()) : Optional_1.None;
    }
    toEither() {
        return this.isSuccess ? Either_1.Right(this.get()) : Either_1.Left(this.getError());
    }
    failed() {
        throw 'impl child';
    }
    recover(f) {
        throw 'impl child';
    }
    recoverWith(f) {
        throw 'impl child';
    }
    fold(fe, ff) {
        return this.isFailure ? fe(this.getError()) : ff(this.get());
    }
    getOrElse(a) {
        return this.isFailure ? a() : this.get();
    }
    orElse(a) {
        return this.isFailure ? a : this;
    }
    foreach(f) {
        if (this.isSuccess) {
            f(this.get());
        }
    }
    transform(fs, ff) {
        try {
            return this.isSuccess ? fs(this.get()) : ff(this.getError());
        }
        catch (e) {
            return Failure(e);
        }
    }
    /** @override */
    apply1(ob, f) {
        return this.flatMap(a => ob.map(b => f(a, b)));
    }
    /** @override */
    apply2(ob, oc, f) {
        return this.flatMap(a => ob.flatMap(b => oc.map(c => f(a, b, c))));
    }
    /** @override */
    apply3(ob, oc, od, f) {
        return this.flatMap(a => ob.flatMap(b => oc.flatMap(c => od.map(d => f(a, b, c, d)))));
    }
    /** @override */
    apply4(ob, oc, od, oe, f) {
        return this.flatMap(a => ob.flatMap(b => oc.flatMap(c => od.flatMap(d => oe.map(e => f(a, b, c, d, e))))));
    }
    /** @override */
    apply5(ob, oc, od, oe, of, f) {
        return this.flatMap(a => ob.flatMap(b => oc.flatMap(c => od.flatMap(d => oe.flatMap(e => of.map(ff => f(a, b, c, d, e, ff)))))));
    }
    /** @override */
    chain(ob) {
        return new TryBuilder1(this, ob);
    }
}
class SuccessImpl extends TryImpl {
    constructor(value) {
        super();
        this.value = value;
        this.isSuccess = true;
        this.isFailure = false;
    }
    get() {
        return this.value;
    }
    getError() {
        throw 'Success has not Error';
    }
    flatMap(f) {
        try {
            return f(this.value);
        }
        catch (e) {
            return Failure(e);
        }
    }
    map(f) {
        return Try(() => f(this.value));
    }
    filter(f) {
        try {
            return f(this.value) ? this : Failure(new Error('Predicate does not hold for ' + this.value));
        }
        catch (e) {
            return Failure(e);
        }
    }
    failed() {
        return Failure(new Error('Success.failed'));
    }
    recover(f) {
        return Success(this.value);
    }
    recoverWith(f) {
        return Success(this.value);
    }
}
class FailureImpl extends TryImpl {
    constructor(e) {
        super();
        this.e = e;
        this.isSuccess = false;
        this.isFailure = true;
    }
    get() {
        throw this.e;
    }
    getError() {
        return this.e;
    }
    flatMap(f) {
        return Failure(this.e);
    }
    map(f) {
        return new FailureImpl(this.e);
    }
    filter(f) {
        return this;
    }
    failed() {
        return this;
    }
    recover(f) {
        try {
            const op = f(this.e);
            return op.nonEmpty ? Success(op.get()) : Failure(this.e);
        }
        catch (e) {
            return Failure(e);
        }
    }
    recoverWith(f) {
        try {
            const op = f(this.e);
            return op.nonEmpty ? op.get() : Failure(this.e);
        }
        catch (e) {
            return Failure(e);
        }
    }
}
// Builders
class TryBuilder1 {
    constructor(oa, ob) {
        this.oa = oa;
        this.ob = ob;
    }
    run(f) {
        return this.oa.apply1(this.ob, f);
    }
    chain(oc) {
        return new TryBuilder2(this.oa, this.ob, oc);
    }
}
exports.TryBuilder1 = TryBuilder1;
class TryBuilder2 {
    constructor(oa, ob, oc) {
        this.oa = oa;
        this.ob = ob;
        this.oc = oc;
    }
    run(f) {
        return this.oa.apply2(this.ob, this.oc, f);
    }
    chain(od) {
        return new TryBuilder3(this.oa, this.ob, this.oc, od);
    }
}
exports.TryBuilder2 = TryBuilder2;
class TryBuilder3 {
    constructor(oa, ob, oc, od) {
        this.oa = oa;
        this.ob = ob;
        this.oc = oc;
        this.od = od;
    }
    run(f) {
        return this.oa.apply3(this.ob, this.oc, this.od, f);
    }
    chain(oe) {
        return new TryBuilder4(this.oa, this.ob, this.oc, this.od, oe);
    }
}
exports.TryBuilder3 = TryBuilder3;
class TryBuilder4 {
    constructor(oa, ob, oc, od, oe) {
        this.oa = oa;
        this.ob = ob;
        this.oc = oc;
        this.od = od;
        this.oe = oe;
    }
    run(f) {
        return this.oa.apply4(this.ob, this.oc, this.od, this.oe, f);
    }
    chain(of) {
        return new TryBuilder5(this.oa, this.ob, this.oc, this.od, this.oe, of);
    }
}
exports.TryBuilder4 = TryBuilder4;
class TryBuilder5 {
    constructor(oa, ob, oc, od, oe, of) {
        this.oa = oa;
        this.ob = ob;
        this.oc = oc;
        this.od = od;
        this.oe = oe;
        this.of = of;
    }
    run(f) {
        return this.oa.apply5(this.ob, this.oc, this.od, this.oe, this.of, f);
    }
}
exports.TryBuilder5 = TryBuilder5;
